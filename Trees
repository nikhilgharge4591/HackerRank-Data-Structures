
def preOrder(root):
    #Write your code here
    if root: 
        # First print the data of node 
        print(root.info, end =" ")

        # Then recur on left child 
        preOrder(root.left) 
  
        # Finally recur on right child 
        preOrder(root.right)



def postOrder(root):
    #Write your code here
   if root == None:
    return
   postOrder(root.left)
   postOrder(root.right)
   print(root.info,end=" ")
   
   
 
def inOrder(root):
    #Write your code here
    if root == None:
        return 
    inOrder(root.left)
    print(root.info, end = " ")
    inOrder(root.right)


def levelOrder(root):
    #Write your code here
    if root == None:
        return
    queue = [root]
    while len(queue) > 0:
        temp_node = queue.pop(0)
        print(temp_node.info, end = " ")

        if temp_node.left is not None:
            queue.append(temp_node.left)
        
        if temp_node.right is not None:
            queue.append(temp_node.right)
            
            
 
    def insertion(self, cur, val):
        if not cur: 
            cur = Node(val)
        elif cur.info > val: 
            cur.left = self.insertion(cur.left, val)
        else: 
            cur.right = self.insertion(cur.right, val)

        return cur
        

    def insert(self, val):
        if not self.root:
            self.root = Node(val)
        else:
            self.insertion(self.root, val)
            
    
def topView(root):
    #Write your code here
    m = {}
    fillMap(root, 0, 0, m) 
    for it in sorted (m.keys()): 
        print(m[it][0], end = " ")

def fillMap(root, d, l, m):
    if root is None:
        return

    if d not in m: 
        m[d] = [root.info,l] 
    elif(m[d][1] > l): 
        m[d] = [root.info,l] 
    fillMap(root.left, d - 1, l + 1, m) 
    fillMap(root.right, d + 1, l + 1, m)
    
    
# This is an input class. Do not edit.
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


def validateBst(tree):
    # Write your code here.
	return validateBstHelper(tree, float("-inf"), float("inf"))

def validateBstHelper(tree, minValue, maxValue):
    if tree is None:
		return True
	if tree.value < minValue or tree.value >= maxValue:
		return False
	leftIsValid = validateBstHelper(tree.left, minValue, tree.value)
	return leftIsValid and validateBstHelper(tree.right, tree.value, maxValue)
	
	
BST Construction


class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def insert(self, value):
        # Write your code here.
        # Do not edit the return statement of this method.
		if self.value > value:
			if self.left is None:
				self.left = BST(value)
			else:
				self.left.insert(value)
		else:
			if self.right is None:
				self.right = BST(value)
			else:
				self.right.insert(value)
				
        return self

    def contains(self, value):
        # Write your code here.
        if self.value > value:
			if self.left.value is None:
				return False
			else:
				self.left.value.contains(value)
		elif self.value < value:
			if self.right.value is None:
				return False
			else:
				self.right.value.contains(value)
		else:
			return True
				

    def remove(self, value, parent = None):
        # Write your code here.
        # Do not edit the return statement of this method.
		if value < self.value:
			if self.left.value is not None:
				self.left.remove(self,value)
		elif value > self.value:
			if self.right.value is not None:
				self.right.remove(self, value)
		else:
			# Edge cases
			if self.left is not None and self.right is not None:
				self.value = self.right.getMinValue()
				self.right.remove(self.value, self)
			elif parent is None:
				if self.left is not None:
					self.value = self.left.value
					self.right = self.left.right
					self.left = self.left.left
				elif self.right is not None:
					self.value = self.right.value
					self.left = self.right.left
					self.right = self.right.right
				else:
					# This is a single-node tree: do nothing.
					pass
			elif parent.left == self:
				parent.left = self.left if self.left is not None else self.right
			elif parent.right == self:
				parent.right = self.left if self.left is not None else self.right
        return self


    def getMinValue(self):
	    if self.left is None:
		    return self.value
	    else:
		    return self.left.getMinValue()
		    
# LOWEST COMMON ANCESTOR
		    
def lca(root, v1, v2):
  #Enter your code here
    if root is None:
        return
    
    if v1 > root.info and v2 > root.info:
        return lca(root.right, v1, v2)
    if v1 < root.info and v2 < root.info:
        return lca(root.left, v1, v2)
    return root

# NodeDepths

def nodeDepths(root, depth=0):
    # Write your code here.
    if root is None:
		return 0
	return depth + nodeDepths(root.left, depth+1) + nodeDepths(root.right, depth+1)
	


# This is the class of the input binary tree.
class BinaryTree:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
	

# Invert Binary Tree
def invertBinaryTree(tree):
    # Write your code here.
    if tree is None:
		return 
	swap(tree)
	invertBinaryTree(tree.left)
	invertBinaryTree(tree.right)
	
def swap(tree):
	tree.left, tree.right = tree.right, tree.left
