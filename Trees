
def preOrder(root):
    #Write your code here
    if root: 
        # First print the data of node 
        print(root.info, end =" ")

        # Then recur on left child 
        preOrder(root.left) 
  
        # Finally recur on right child 
        preOrder(root.right)



def postOrder(root):
    #Write your code here
   if root == None:
    return
   postOrder(root.left)
   postOrder(root.right)
   print(root.info,end=" ")
   
   
 
def inOrder(root):
    #Write your code here
    if root == None:
        return 
    inOrder(root.left)
    print(root.info, end = " ")
    inOrder(root.right)


def levelOrder(root):
    #Write your code here
    if root == None:
        return
    queue = [root]
    while len(queue) > 0:
        temp_node = queue.pop(0)
        print(temp_node.info, end = " ")

        if temp_node.left is not None:
            queue.append(temp_node.left)
        
        if temp_node.right is not None:
            queue.append(temp_node.right)
            
            
 
    def insertion(self, cur, val):
        if not cur: 
            cur = Node(val)
        elif cur.info > val: 
            cur.left = self.insertion(cur.left, val)
        else: 
            cur.right = self.insertion(cur.right, val)

        return cur
        

    def insert(self, val):
        if not self.root:
            self.root = Node(val)
        else:
            self.insertion(self.root, val)
            
    
def topView(root):
    #Write your code here
    m = {}
    fillMap(root, 0, 0, m) 
    for it in sorted (m.keys()): 
        print(m[it][0], end = " ")

def fillMap(root, d, l, m):
    if root is None:
        return

    if d not in m: 
        m[d] = [root.info,l] 
    elif(m[d][1] > l): 
        m[d] = [root.info,l] 
    fillMap(root.left, d - 1, l + 1, m) 
    fillMap(root.right, d + 1, l + 1, m)
