Delete a Node:

def deleteNode(head, position):
    if (head == None): 
        return head
    if (position == 0):
        return head.next
    current = head
    index = 0
    while (index < position-1):
        current = current.next
        index +=1
    current.next = current.next.next
    return head
    
    
    Reverse a llist
    
    def reversePrint(head):
    if head == None:
        return
    reversePrint(head.next)
    print(head.data)


Reverse a Linklist

def reverse(head):
    reversed_list = []
    if head == None:
        return head
    prev = None
    current = head

    while current is not None:
        new_node = current.next
        current.next = prev
        prev = current
        current = new_node   
     
    return prev

Compare Two linklist

def compare_lists(llist1, llist2):
    if llist1 is None and llist2 is None:
        return 1
    first_1 = llist1
    second_2 = llist2
    while first_1 is not None and second_2 is not None:
        if first_1.data != second_2.data:
            break
        if first_1.next is None and second_2.next is None:
            return 1
        first_1 = first_1.next
        second_2 = second_2.next
    return 0
    
    Merge LinkLists
    
    def mergeLists(headOne, headTwo):
    # Write your code here.
    p1 = headOne
    p2 = headTwo
    prev = None
    while p1 is not None and p2 is not None:
        if p1.data < p2.data:
            prev = p1
            p1 = p1.next
        else:
            if prev is not None:
                prev.next = p2
            prev = p2
            p2 = p2.next
            prev.next = p1
    if p1 is None:
        prev.next = p2
    return headOne if headOne.data < headTwo.data else headTwo
